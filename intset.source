---------------------------------------------------------------------------
-- intset.sql-
--    This file shows how to create a new user-defined type and how to
--    use this new type.
--
--Group 404
--Yunhan Wang & Yuyou Xu
--z5140507 & z5143390
---------------------------------------------------------------------------

-- Creating a new type:
--	We are going to create a new type called 'intset' which represents
--	sets of integers.
--	A user-defined type must have an input and an output function, and
--	optionally can have binary input and output functions.  All of these
--	are usually user-defined C functions.

-- the input function 'intset_in' takes a null-terminated string (the
-- textual representation of the type) and turns it into the internal
-- (in memory) representation. 


---------------------------------------------------------------------------
CREATE FUNCTION intset_in(cstring)
   RETURNS intSet
   AS '_OBJWD_/intset'
   LANGUAGE C IMMUTABLE STRICT;

-- the output function 'intset_out' takes the internal representation and
-- converts it into the textual representation.

CREATE FUNCTION intset_out(intSet)
   RETURNS cstring
   AS '_OBJWD_/intset'
   LANGUAGE C IMMUTABLE STRICT;


-- now, we can create the type. The internallength specifies the size
-- storage EXTENDED allows both compression and out-of-line storage

CREATE TYPE intSet (
   input = intset_in,
   output = intset_out,
   storage = extended,
   alignment = int4,
   internallength = VARIABLE 
);
--------------------------------------------------------------------------


--------------------------------------------------------------------------
-- Creating an operator for the new type:
--	Let's define an add operator for intset types.
--	There are 8 operators, <@, @, @>, =, &&, ||, !!, -.
--------------------------------------------------------------------------


CREATE FUNCTION intset_contains(int, intSet)
   RETURNS bool
   AS '_OBJWD_/intset'
   LANGUAGE C IMMUTABLE STRICT;

-- we can now define the operator. We show a binary operator here but you
-- can also define unary operators by omitting either of leftarg or rightarg.
CREATE OPERATOR <@ (
   leftarg = int,
   rightarg = intSet,
   procedure = intset_contains
   -- commutator = <@
);

-- first, define the required operators
CREATE FUNCTION intset_cardinality(intSet) RETURNS int
   AS '_OBJWD_/intset' LANGUAGE C IMMUTABLE STRICT;

CREATE FUNCTION intset_containset(intSet, intSet) RETURNS bool
   AS '_OBJWD_/intset' LANGUAGE C IMMUTABLE STRICT;

CREATE FUNCTION intset_equal(intSet, intSet) RETURNS bool
   AS '_OBJWD_/intset' LANGUAGE C IMMUTABLE STRICT;

CREATE FUNCTION intset_intersection(intSet, intSet) RETURNS intSet
   AS '_OBJWD_/intset' LANGUAGE C IMMUTABLE STRICT;

CREATE FUNCTION intset_union(intSet, intSet) RETURNS intSet
   AS '_OBJWD_/intset' LANGUAGE C IMMUTABLE STRICT;

CREATE FUNCTION intset_difference(intSet, intSet) RETURNS intSet
   AS '_OBJWD_/intset' LANGUAGE C IMMUTABLE STRICT;

CREATE FUNCTION intset_disjunction(intSet, intSet) RETURNS intSet
   AS '_OBJWD_/intset' LANGUAGE C IMMUTABLE STRICT;




CREATE OPERATOR @ (
   rightarg = intSet, procedure = intset_cardinality
);
CREATE OPERATOR @> (
   leftarg = intSet, rightarg = intSet, procedure = intset_containset
);
CREATE OPERATOR = (
   leftarg = intSet, rightarg = intSet, procedure = intset_equal,
   commutator = = ,
   -- leave out negator since we didn't create <> operator
   -- negator = <> ,
   restrict = eqsel, join = eqjoinsel
);
CREATE OPERATOR && (
   leftarg = intSet, rightarg = intSet, procedure = intset_intersection,
   commutator = !! 
);
CREATE OPERATOR || (
   leftarg = intSet, rightarg = intSet, procedure = intset_union
);
CREATE OPERATOR - (
   leftarg = intSet, rightarg = intSet, procedure = intset_difference
);
CREATE OPERATOR !! (
   leftarg = intSet, rightarg = intSet, procedure = intset_disjunction,
   commutator = && 
);

-- now we can make the operator class
-- CREATE OPERATOR CLASS intset_ops
--    DEFAULT FOR TYPE intset USING btree AS
--        OPERATOR        1       <@,
--        OPERATOR        2       @,
--        OPERATOR        3       @>,
--        OPERATOR        4       =,
--        OPERATOR        5       &&,
--	  OPERATOR	  6	  ||;
--	  OPERATOR	  8	  -;
--	  OPERATOR	  7	  !!;




